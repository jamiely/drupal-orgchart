<?php
// $Id$

/**
* Display help and module information
* @param path which path of the site we're displaying help
* @param arg array that holds the current path as would be returned from arg() function
* @return help text for the path
*/
function orgchart_help ($path, $arg) {
  $output = '';  //declare your output variable
  switch ($path) {
    case "admin/help#orgchart":
      $output = '<p>'.  t("Displays links to nodes created on this date") .'</p>';
      break;
  }
  return $output;
}  // function orgchart_help

/**
 * Implementation of hook_init().
 */
function orgchart_init() {
  drupal_add_css(drupal_get_path('module', 'orgchart') .'/orgchart.css');
}

/**
* Valid permissions for this module
* @return array An array of valid permissions for the orgchart module
*/
function orgchart_perm() {
  return array('access orgchart content');
} // function orgchart_perm()

/**
* Implementation of hook_block
* @param string $op one of "list", "view", "save" and "configure"
* @param integer $delta code to identify the block
* @param array $edit only for "save" operation
**/
function orgchart_block($op = 'list', $delta = 0, $edit = array()) { 
  if ($op == "list") {
    // Generate listing of blocks from this module, for the admin/block page
    $block = array();
    $block[0]["info"] = t('Organizational Chart');
    return $block;
  }
  else if ($op == 'view') {
    
    $eId = orgchart_get_employee_id($GLOBALS['user']->uid);
    $block['subject'] = 'Org Chart';
    $hier = orgchart_get_hierarchy($eId);
    $block['content'] = $eId ? 
      orgchart_display($hier) :
      'No employee id specified.';
    
    
    
    return $block;
  }
} // function orgchart_block

function orgchart_display($hier) {
  static $type;
  
  $rtn = '';
  if ( !isset($type) ) {
    $type = variable_get('orgchart_display_type', 'html');
  }
  
  switch($type) {
    case 'graphviz':
      $rtn = orgchart_display_graphviz($hier);
      break;
    default:
      $rtn = orgchart_display_html($hier);
  }
  
  return $rtn;
}

function orgchart_user_link ($uid, $linkText = '') {
  $u = $uid;
  if (is_object($uid)) {
    $u = $uid->uid;
  }
  else if (is_array($uid)) {
    $u = $uid['uid'];
  }
  
  if ($linkText == '') $linkText = orgchart_user_name($uid);
  
  return l($linkText, '/user/'.$u);
}

function orgchart_user_name($uid) {
  $linkText = 'No name';
  if (is_object($uid)) {
    $linkText = $uid->name;
  }
  else if (is_array($uid)) {
    $linkText = $uid['name'];
  }
  
  return $linkText;
}

function orgchart_display_html($hier, $showBoss=true, $root=true) {
  $classDirectSupervisor = 'orgchart_supervisor';
  $classSubordinate = 'orgchart_subordinate';
  $classEmployee = 'orgchart_person';
  $classMe = 'orgchart_me';
  
  $html = array();
  
  $isMe = $GLOBALS['user']->uid == $hier['uid'];
  
  if ($root) $html[] = '<div class="orgchart"';
  if ($showBoss) $html[] = '<ul class="orgchart"><span class="orgchart_person '.$classDirectSupervisor.'">' . orgchart_user_link($hier['supervisor']) . '</span><li class="orgchart">';
  $html[] = '<ul class="orgchart"><span class="orgchart_person '.(
    $isMe ? $classMe : $classSubordinate
    ).'">' . orgchart_user_link($hier) . ($isMe ? ' (You)' : '') . '</span>';
  
  if (is_array($hier['subordinates'])) {
    foreach ( $hier['subordinates'] as $sub ) {
      $html[] = '<li class="orgchart">';
      $html[] = orgchart_display_html($sub,false,false);
      $html[] = '</li>';
    
    }
  }
  $html[] = '</ul>';
  if ($showBoss) $html[] = '</li></ul>';
  if ($root) $html[] = '</div>';
  return implode('',$html); 
}

function orgchart_graphviz_loadclass (){
  if(variable_get('orgchart_graphviz_usepear', true)) {
    require_once 'Image/GraphViz.php'; // PEAR library
  }
  else {
    require_once 'LocalGraphViz.php'; // local copy of PEAR library, changed.
  }
  
  
}

function orgchart_display_graphviz($hier, $showBoss=true, &$graph=null) {
  static $images;
  
  $key = implode('-',array($hier['uid'],$showBoss));
  if ( empty($images) ) {
    if ( ($cache = cache_get ('orgchart_graphviz_images')) && !empty($cache->data)) {
      $images = $cache->data;
    }
    else {
      $images = array();
    }
  }
  
  $imageURL = '';
  // must check not only that the cache data exists, but that the 
  // image file itself exists. it may have been deleted by some
  // external process
  if ( $graph == null && isset($images[$key]) && file_exists($images[$key]) ) {
    $imageURL = $images[$key];
  }
  else {
    static $binPath;
    if ( !isset($binPath) ) {
      // no default is specificed, because the binary could be anywhere.
      $binPath = variable_get('orgchart_graphviz_binpath', '');      
    }
  
    $root = false;
    if ( empty($graph) ) {
      // loads the Image_GraphViz class file
      orgchart_graphviz_loadclass ();
      
      $graph = new Image_GraphViz();
      $graph->binPath = $binPath;
      $root = true;
    }
  
    $html = array();
   
    $isMe = $GLOBALS['user']->uid == $hier['uid'];
   
     if ( $showBoss ) {
       // creates the node
       orgchart_display_graphviz($hier['supervisor'],false,&$graph);
       // add the edges
       $graph->addEdge(
         array($hier['supervisor']['uid']=>$hier['uid']), 
         array(
           'color'=>'red',
           'label'=>'' // no label
         ));
     }
   
    // create a node that represents the current useer
    $graph->addNode($hier['uid'], array(
      'URL' => 'http://www.google.com',
      'label' => orgchart_user_name($hier),
      'shape' => $isMe ? 'circle' : 'box'
      ));

    if (is_array($hier['subordinates'])) {
      foreach ( $hier['subordinates'] as $sub ) {
        // add the nodes
      
        orgchart_display_graphviz($sub,false,&$graph);
        // add the edges
        $graph->addEdge(
          array($hier['uid']=>$sub['uid']), array(
          'color'=>'red',
          'label'=>'' // no label
          ));      
    
      }
    }
  
    if ( $root ) {
      $ext = variable_get('orgchart_graphviz_output_format', 'png');
      $imageData = $graph->fetch($ext);
      $path = tempnam(orgchart_get_cachedir(), 'graph').'.'.$ext;
      $handle = fopen($path, 'w');
      fputs($handle, $imageData);
      fclose($handle);
      
      $imageURL = drupal_get_path('module', 'orgchart').'/cache/'.basename($path);
      $images[$key] = $imageURL;
      cache_set('orgchart_graphviz_images', $images);
    }
  }
  
  return $imageURL == '' ? 'No image available' :
    "<img src=\"$imageURL\" alt=\"org chart\" title=\"{$hier['name']}'s Organizational Hierarchy\" />";
}



function orgchart_get_cachedir() {
  return dirname(__FILE__).'/cache';
}


function orgchart_get_key_fields() {
  static $fields;
  if (!isset($fields)) {
    if ($cache = cache_get('orgchart_fields') && !empty($cache->data)) {
      $fields = $cache->data;
    }
    else {
      $fields = array();

      $profileFieldEmployee = variable_get('orgchart_profile_field_employee_id', 'profile_employee_id');      
      $profileFieldSupervisor = variable_get('orgchart_profile_field_supervisor_id', 'profile_supervisor_id');
      
      $query = "SELECT fid, name FROM {profile_fields} WHERE name in ('$profileFieldEmployee', '$profileFieldSupervisor')";

      $query_result = db_query($query);
      // retrieve fields. this should probably be cached.
      while ($fields_info = db_fetch_object($query_result)) {
        if($fields_info->name == $profileFieldEmployee)
          $fields['profile_employee_id'] = $fields_info->fid;
        elseif($fields_info->name == $profileFieldSupervisor)
          $fields['profile_supervisor_id'] = $fields_info->fid;
      }
      
      

      $result = cache_set('orgchart_fields', $fields);
    }
  }
  return $fields;
}

function orgchart_get_user_id ($employee_id) {
  static $fields;
  static $userids;
  
  if (empty($userids)) {
    if ($cache = cache_get('orgchart_userids') && !empty($cache->data)) {
      $userids = $cache->data;
    }
    else {
      $userids = array();
    }
  }

  // we have the employee ids, now check to see if employee_id is in there
  if (isset($userids[$employee_id])) {
    return $userids[$employee_id];
  }
  else { 
    // don't load fields until we need to
    if (!isset($fields)) {
      $fields = orgchart_get_key_fields ();
    }
    // proceed with lookup
    $query = "SELECT uid FROM {profile_values} WHERE value = %d AND fid = %d";
    $result = db_query($query, $employee_id, $fields['profile_employee_id']); // retrieve employee id given a user id
    $info = db_fetch_object($result);

    if ($info) {
      $id = $info->uid;
      $userids[$employee_id] = $id;
      // update the cache
      cache_set('orgchart_userids', $userids);
      
      return $id;
    }
  }
  
  return null;
}

function orgchart_get_employee_id ($uid) {
  static $fields;
  static $employeeIds;
  
  if (empty($employeeIds)) {
    if ($cache = cache_get('orgchart_employeeids') && !empty($cache->data)) {
      $employeeIds = $cache->data;
    }
    else {
      $employeeIds = array();
    }
  }

  // we have the employee ids, now check to see if uid is in there
  if (isset($employeeIds[$uid])) {
    return $employeeIds[$uid];
  }
  else { 
    // don't load fields until we need to
    if (!isset($fields)) {
      $fields = orgchart_get_key_fields ();
    }
    // proceed with lookup
    $query = "SELECT value FROM {profile_values} WHERE uid = %d AND fid = %d";
    $result = db_query($query, $uid, $fields['profile_employee_id']); // retrieve employee id given a user id
    
    $info = db_fetch_object($result);
    if ($info) {
      $id = $info->value;
      $employeeIds[$uid] = $id;
      // update the cache
      cache_set('orgchart_employeeids', $employeeIds);
      
      return $id;
    }
  }
  
  return null;
}

/**
* Will not get siblings--people in the same level as you.
**/
function orgchart_get_hierarchy($root_employee_id, $direction = 0, $depth=3, $get_coworkers = false) {
  static $hierTree;
  
  if (!isset($hierTree)) {
    if (($cache = cache_get('orgchart_hiertree', 'cache')) && !isset($cache->data)) {
      $hierTee = $cache->data;
    }
    else {
      $hierTree = array();
    }
  }
  
  // key used for hashing
  $key = implode('-', func_get_args());
  if (!isset($hierTree[$key])) {
    $hier = orgchart_get_hierarchy_base($root_employee_id);
    
    if ($depth > 0) {
      if ($direction<=0) {
        // go down in the hierarchy
        $hier['subordinates'] = array();
        foreach($hier['profile_subordinate_id'] as $subid) {
          $hier['subordinates'][] = orgchart_get_hierarchy($subid, -1, $depth - 1);
        }
      }
      if ($direction>=0 && !empty($hier['profile_supervisor_id'])) {
        // go up in the hierarchy
        $hier['supervisor'] = orgchart_get_hierarchy($hier['profile_supervisor_id'], 1, $depth - 1);
      }
    }
    if ($get_coworkers && isset($hier['supervisor'])) {
      // same supervisor's subordinates are your coworkers
      $supervisorHierarchy = orgchart_get_hierarchy($hier['supervisor']['profile_employee_id'], -1, 1, true);
      $hier['coworkers'] = $supervisorHierarchy['subordinates'];
    }
    $hierTree[$key] = &$hier;
    cache_set('orgchart_hiertree', $hierTree);
  }
  else {
    $hier = $hierTree[$key];
  }
  
  return $hier;
}

function orgchart_get_subordinates($empId) {
  static $subordinates;
  static $fields;
  
  if (!isset($subordinates)) {
    $cache = cache_get('orgchart_subordinates');
    $subordinates = !isset($cache->data) ? array() : $cache->data;
  }
  
  if (!isset($subordinates[$empId])) {
    $fields = orgchart_get_key_fields ();
    
    $subordinates[$empId] = array();
    // retrieves employee ids of all subordinates
    $query = "SELECT sub.uid, sub.value as profile_employee_id FROM {profile_values} sup INNER JOIN {profile_values} sub ON sup.fid = %d and sup.value = %d and sub.uid = sup.uid and sub.fid = %d";
    
    // issue query
    $result = db_query($query, $fields['profile_supervisor_id'], $empId, $fields['profile_employee_id']);
    
    // fetch each result and load it into the return array
    while ($info = db_fetch_array($result)) {
      $subordinates[$empId][] = $info['profile_employee_id'];
    }
    // save cache
    cache_set('orgchart_subordinates', $subordinates);
  }
  return $subordinates[$empId];  
}

function orgchart_get_hierarchy_base($root_employee_id) {
  static $fields;
  static $hierarchy;
      
  if (!isset($hierarchy)) {
    $cache = cache_get('orgchart_hierarchy', 'cache');
    $hierarchy = !isset($cache->data) ? array() : $cache->data;
  }
  
  if (isset($hierarchy[$root_employee_id])) {
    return $hierarchy[$root_employee_id];
  }
  else { 
    // hierarchy was not found in cache. look it up
    $uid = orgchart_get_user_id ($root_employee_id);
    
    if ($uid){
      if (!isset($fields)) {
        $fields = orgchart_get_key_fields ();
      }
      $query_info = "SELECT fid, value FROM {profile_values} WHERE uid = %d AND fid IN (%d, %d, %d) ";
      $query_info_result = db_query(
        $query_info, 
        $uid, 
        $fields['profile_employee_id'], 
        $fields['profile_supervisor_id'] 
        );
      // init hierarchy
      $user = &user_load($uid);
      $hierarchy[$root_employee_id] = array (
        'profile_employee_id' => $root_employee_id,
        'uid' => $uid,
        'name' => $user->name,
        'profile_subordinate_id' => orgchart_get_subordinates($root_employee_id),
        'profile_supervisor_id' => null // init to empty, will be set by array
        );
      while ($result = db_fetch_object($query_info_result)) {
        if ($result->fid == $fields['profile_supervisor_id']) {
          $hierarchy[$root_employee_id]['profile_supervisor_id'] = $result->value;
        }
      }
      // save to cache
      cache_set('orgchart_hierarchy', $hierarchy);
      return $hierarchy[$root_employee_id];
    }
  }
  return null;
}


function orgchart_admin() {
  $form = array();

  $form['orgchart_profile_field_employee_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Employee ID'),
    '#default_value' => variable_get('orgchart_profile_field_employee_id', 'profile_employee_id'),
    '#size' => 50,
    '#maxlength' => 50,
    '#description' => t("The profile field which contains the unique ID."),
    '#required' => TRUE,
  );

  $form['orgchart_profile_field_supervisor_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Supervisor ID'),
    '#default_value' => variable_get('orgchart_profile_field_supervisor_id', 'profile_supervisor_id'),
    '#size' => 50,
    '#maxlength' => 50,
    '#description' => t("The profile field which contains the supervisor's unique ID."),
    '#required' => TRUE,
  );


  $form['orgchart_display_type'] = array(
    '#type' => 'select',
    '#title' => t('Display Type'),
    '#default_value' => variable_get('orgchart_display_type', 'html'),
    '#options' => array(
      'html'=>t('HTML'),
      'graphviz'=>t('GraphViz')
      ),
    '#description' => t("The full binary path to the GraphViz executables (such as dot)."),
    '#required' => FALSE,
  );

  $form['orgchart_graphviz_output_format'] = array(
    '#type' => 'select',
    '#title' => t('Graphviz output format'),
    '#default_value' => variable_get('orgchart_graphviz_output_format', 'png'),
    '#options' => array(
      'png'=>t('png'),
      'gif'=>t('gif')
      ),
    '#description' => t("Graphviz output format (only required if display type is GraphViz)"),
    '#required' => FALSE,
  );
  
  
  $form['orgchart_graphviz_usepear'] = array(
    '#type' => 'checkbox',
    '#title' => t('GraphViz use PEAR library'),
    '#default_value' => variable_get('orgchart_graphviz_usepear', true),
    '#description' => t("GraphViz use PEAR library"),
    '#required' => FALSE,
  );

  // orgchart_graphviz_usepear


  $form['orgchart_graphviz_binpath'] = array(
    '#type' => 'textfield',
    '#title' => t('GraphViz Binary Path'),
    '#default_value' => variable_get('orgchart_graphviz_binpath', ''),
    '#size' => 200,
    '#maxlength' => 200,
    '#description' => t("The full binary path to the GraphViz executables (such as dot)."),
    '#required' => FALSE,
  );  

  

  return system_settings_form($form);
}


function orgchart_menu() {

  $items = array();

  $items['admin/settings/orgchart'] = array(
    'title' => 'Org Chart settings',
    'description' => 'Org chart settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('orgchart_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM
   );

  return $items;
}